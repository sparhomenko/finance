from builtins import object as obj
from collections.abc import Mapping
from typing import Any

def archive(obj: object) -> bytes: ...
def unarchive(plist: bytes) -> object: ...
def update_class_map(new_map: Mapping[str, type]) -> None: ...

class ArchivingObject:
    def encode(self, key: str, val: obj) -> None: ...

class ArchivedObject:
    object: dict[str, obj]
    def decode(self, key: str) -> obj: ...
